import React, { Component } from "react";
import { Map, Marker, GoogleApiWrapper } from "google-maps-react"
import { config } from "./Config"
import Spinner from "../UI/Spinner/Spinner";

// Return map bounds based on list of places
const getMapBounds = (map, maps, places) => {
  const bounds = new maps.LatLngBounds();
  console.log('estoy');
console.log(places);
  places.forEach((place) => {
    bounds.extend(new maps.LatLng(
      place.geometry.location.lat,
      place.geometry.location.lng,
    ));
  });
  return bounds;
};

// Re-center map when resizing the window
const bindResizeListener = (map, maps, bounds) => {
  maps.event.addDomListenerOnce(map, 'idle', () => {
    maps.event.addDomListener(window, 'resize', () => {
      map.fitBounds(bounds);
    });
  });
};

// Fit map to its bounds after the api is loaded
const apiIsLoaded = (map, maps, places) => {
  // Get bounds by our places
  const bounds = getMapBounds(map, maps, places);
  // Fit map to bounds
  map.fitBounds(bounds);
  // Bind the resize listener
  bindResizeListener(map, maps, bounds);
};

export class MapContainer extends Component {
  /*constructor(props) {
    super(props);
    
    this.onMarkerClick = this.onMarkerClick.bind(this);
    this.onMapClick    = this.onMapClick.bind(this);
    
    this.state = {
      showingPopup: false,
      activeMarker: {},
      selectedPlace: {},
    };
  }*/
/*
  onMapClick(){
    this.setState({
      selectedPlace: null,
      activeMarker: null,
      showingPopup: false
    });
  }

  onMarkerClick(props, marker, e) {
    this.setState({
      selectedPlace: props,
      activeMarker: marker,
      showingPopup: true
    });
  }*/
  adjustMap(mapProps, map) {
    console.log(this.props);
    const {google, markers} = mapProps;
    const bounds = new google.maps.LatLngBounds();
  
    markers.forEach(marker => {
      const {lat, lng} = marker.position;
  
      bounds.extend(new google.maps.LatLng(lat, lng));
    });
  
    map.fitBounds(bounds);
    // map.panToBounds(bounds);
  }

  componentDidMount(){
    
  }

  render() {
    if (!this.props.google) {
      return <Spinner />;
    }
    
    const defaultCenter = config.default_center;

    return (
        <Map 
          ref={(ref) => { this.map = ref; }}
          styles={config.style}
          zoomControl={false}
          scaleControl={false}
          streetViewControl={false}
          panControl={false}
          fullscreenControl={false}
          mapTypeControl={false}
          google={this.props.google} 
          initialCenter={this.props.userLocation === null ? defaultCenter: this.props.userLocation}
          zoom={config.default_zoom} 
          center={this.props.userLocation === null ? defaultCenter: this.props.userLocation}
          onClick={this.props.mapClick}
          onReady={this.adjustMap}
        >
          {this.props.markers.map(marker => {
            return (
              <Marker
                key={marker.id}
                onClick={this.props.markerClick}
                position={{ lat: marker.ubicacion.lat, lng: marker.ubicacion.lng }}
                name={marker.title}
                data={marker}
                icon={{
                  url: marker.tipo_maquinaria.icono,
                  anchor: new this.props.google.maps.Point(17, 46),
                  scaledSize: new this.props.google.maps.Size(24, 24)
                }}
              />
            )
          })}
          {/*this.props.userLocation &&  <Marker 
                                            key="current" 
                                            position={this.props.userLocation} 
                                            name="Tu ubicaciÃ³n" 
                                            icon={config.userIcon}
                                            onClick={this.props.markerClick} />*/}
        </Map>
    );
  }
}

export default GoogleApiWrapper({
  apiKey: process.env.REACT_APP_GOOGLEMAPS_API_KEY,
  v: "3.30",
  language: 'es',
  LoadingContainer: Spinner
})(MapContainer);